library;
import self as self;

import "org-dartlang-testcase:///deferred_lib.dart" deferred as lib;

static method main() → dynamic
  ;
static method test(dynamic x) → dynamic
  ;

library;
import self as self2;
import "dart:core" as core;

class C extends core::Object {
  static field core::int* y;
  synthetic constructor •() → self2::C*
    ;
  static method m() → core::int*
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
static field core::int* x;
static method m(dynamic x) → dynamic
  ;
