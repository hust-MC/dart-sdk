library;
import self as self;
import "main_lib.dart" as mai;

import "org-dartlang-testcase:///main_lib.dart";

class B extends mai::A {
  synthetic constructor •() → self::B*
    : super mai::A::•()
    ;
}
static method main() → dynamic {}

library;
import self as mai;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → mai::A*
    : super core::Object::•()
    ;
  @#C1
  abstract method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature get runtimeType() → core::Type*;
}

constants  {
  #C1 = core::_Override {}
}
