library;
import self as self;
import "dart:core" as core;

class Foo extends core::Object {
  static field dynamic _redirecting# = <dynamic>[self::Foo::•];
  constructor named(dynamic p) → self::Foo*
    ;
  @self::forFactoryItself
  static factory •(dynamic p) → self::Foo*
    let dynamic #redirecting_factory = self::Foo::named in invalid-expression;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
static const field core::int* forParameter = 1;
static const field core::int* forFactoryItself = 2;
static const field core::int* anotherForParameter = 3;
static method main() → dynamic
  ;
