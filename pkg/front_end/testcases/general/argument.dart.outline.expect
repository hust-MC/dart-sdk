library;
import self as self;
import "dart:core" as core;

abstract class Base extends core::Object {
  synthetic constructor •() → self::Base*
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
class Foo extends self::Base {
  synthetic constructor •() → self::Foo*
    ;
}
class Bar extends self::Base {
  synthetic constructor •() → self::Bar*
    ;
}
class Baz extends self::Base {
  synthetic constructor •() → self::Baz*
    ;
}
static method foo(dynamic x) → void
  ;
static method bar(dynamic x) → void
  ;
static method foo_escaped(dynamic x) → void
  ;
static method bar_escaped(dynamic x) → void
  ;
static method escape(dynamic fn) → void
  ;
static method main() → dynamic
  ;
