library;
import self as self;
import "dart:core" as core;
import "dart:mirrors" as mir;

import "dart:mirrors";

class _FailingTest extends core::Object /*hasConstConstructor*/  {
  const constructor •() → self::_FailingTest*
    : super core::Object::•()
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
class MyTest extends core::Object {
  synthetic constructor •() → self::MyTest*
    : super core::Object::•()
    ;
  @#C1
  method foo() → void {}
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
abstract class _MyTest2&Object&MyTest = core::Object with self::MyTest /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_MyTest2&Object&MyTest*
    : super core::Object::•()
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
class MyTest2 extends self::_MyTest2&Object&MyTest {
  synthetic constructor •() → self::MyTest2*
    : super self::_MyTest2&Object&MyTest::•()
    ;
}
static const field self::_FailingTest* failingTest = #C1;
static method main() → dynamic {
  mir::ClassMirror* classMirror = mir::reflectClass(self::MyTest2*);
  classMirror.{mir::ClassMirror::instanceMembers}.{core::Map::forEach}((core::Symbol* symbol, mir::MethodMirror* memberMirror) → core::Null? {
    if(memberMirror.{mir::DeclarationMirror::simpleName}.{core::Symbol::==}(#C2)) {
      core::print(memberMirror);
      core::print(self::_hasFailingTestAnnotation(memberMirror));
    }
  });
}
static method _hasFailingTestAnnotation(mir::MethodMirror* method) → core::bool* {
  core::bool* r = self::_hasAnnotationInstance(method, #C1);
  core::print("[_hasFailingTestAnnotation] ${method} ${r}");
  return r;
}
static method _hasAnnotationInstance(mir::DeclarationMirror* declaration, dynamic instance) → core::bool*
  return declaration.{mir::DeclarationMirror::metadata}.{core::Iterable::any}((mir::InstanceMirror* annotation) → core::bool* {
    core::print("annotation: ${annotation.{mir::InstanceMirror::reflectee}}");
    return core::identical(annotation.{mir::InstanceMirror::reflectee}, instance);
  });

constants  {
  #C1 = self::_FailingTest {}
  #C2 = #foo
}
