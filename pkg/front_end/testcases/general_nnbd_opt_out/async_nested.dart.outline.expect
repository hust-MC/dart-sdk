library;
import self as self;
import "dart:core" as core;

import "dart:async";

class Node extends core::Object {
  final field core::List<self::Node*>* nested;
  final field core::String* name;
  constructor •(core::String* name, [core::List<self::Node*>* nested]) → self::Node*
    ;
  method toString() → core::String*
    ;
  method toSimpleString() → dynamic
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
static method main() → void
  ;
