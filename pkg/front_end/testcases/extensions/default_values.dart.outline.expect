library;
import self as self;
import "dart:core" as core;

class Class extends core::Object {
  synthetic constructor •() → self::Class*
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
extension Extension on self::Class* {
  method method0 = self::Extension|method0;
  tearoff method0 = self::Extension|get#method0;
  method method1 = self::Extension|method1;
  tearoff method1 = self::Extension|get#method1;
  method method2 = self::Extension|method2;
  tearoff method2 = self::Extension|get#method2;
  method method3 = self::Extension|method3;
  tearoff method3 = self::Extension|get#method3;
  static method staticMethod = self::Extension|staticMethod;
}
static method Extension|method0(final self::Class* #this, [dynamic a]) → dynamic
  ;
static method Extension|get#method0(final self::Class* #this) → ([dynamic]) →* dynamic
  return ([dynamic a]) → dynamic => self::Extension|method0(#this, a);
static method Extension|method1(final self::Class* #this, [dynamic a]) → dynamic
  ;
static method Extension|get#method1(final self::Class* #this) → ([dynamic]) →* dynamic
  return ([dynamic a]) → dynamic => self::Extension|method1(#this, a);
static method Extension|method2(final self::Class* #this, {dynamic b}) → dynamic
  ;
static method Extension|get#method2(final self::Class* #this) → ({b: dynamic}) →* dynamic
  return ({dynamic b}) → dynamic => self::Extension|method2(#this, b: b);
static method Extension|method3(final self::Class* #this, {dynamic c}) → dynamic
  ;
static method Extension|get#method3(final self::Class* #this) → ({c: dynamic}) →* dynamic
  return ({dynamic c}) → dynamic => self::Extension|method3(#this, c: c);
static method Extension|staticMethod() → dynamic
  ;
static method main() → dynamic
  ;
static method expect(dynamic expected, dynamic actual) → dynamic
  ;
