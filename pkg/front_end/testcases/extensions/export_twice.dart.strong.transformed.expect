library;
import self as self;
import "export_twice_lib1.dart" as exp;

import "org-dartlang-testcase:///export_twice_lib1.dart";
import "org-dartlang-testcase:///export_twice_lib2.dart";

static method main() → dynamic {
  exp::Extension|method(new exp::Class::•());
}

library;
import self as exp;
import "dart:core" as core;

class Class extends core::Object {
  synthetic constructor •() → exp::Class*
    : super core::Object::•()
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
extension Extension on exp::Class* {
  method method = exp::Extension|method;
  tearoff method = exp::Extension|get#method;
}
static method Extension|method(final exp::Class* #this) → dynamic {}
static method Extension|get#method(final exp::Class* #this) → () →* dynamic
  return () → dynamic => exp::Extension|method(#this);

library;
import self as self2;
import "export_twice_lib1.dart" as exp;
additionalExports = (exp::Extension)

export "org-dartlang-testcase:///export_twice_lib1.dart";
