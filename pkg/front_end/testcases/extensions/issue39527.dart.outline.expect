library;
import self as self;
import "dart:core" as core;

class C extends core::Object {
  field core::int* value;
  synthetic constructor •() → self::C*
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
extension Extension1 on self::C* {
  operator [] = self::Extension1|[];
  operator []= = self::Extension1|[]=;
  operator - = self::Extension1|-;
}
static method Extension1|[](final self::C* #this, core::int* index) → self::C*
  ;
static method Extension1|[]=(final self::C* #this, core::int* index, self::C* other) → void
  ;
static method Extension1|-(final self::C* #this, core::int* val) → self::C*
  ;
static method main() → dynamic
  ;
