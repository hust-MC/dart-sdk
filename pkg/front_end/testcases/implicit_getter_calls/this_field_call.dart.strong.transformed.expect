library;
import self as self;
import "dart:core" as core;

class A<T extends core::Object* = dynamic> extends core::Object {
  field (self::A::T*) →* void f;
  constructor •((self::A::T*) →* void f) → self::A<self::A::T*>*
    : self::A::f = f, super core::Object::•()
    ;
  method foo(generic-covariant-impl self::A::T* x) → dynamic
    return let final self::A::T* #t1 = x in this.{self::A::f}(#t1);
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
static method main() → dynamic {
  new self::A::•<core::int*>((core::int* x) → core::Null? {}).{self::A::foo}(3);
}
