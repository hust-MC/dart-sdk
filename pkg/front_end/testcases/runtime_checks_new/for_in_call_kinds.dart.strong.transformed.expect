library test;
import self as self;
import "dart:core" as core;

class C extends core::Object {
  static field dynamic staticField = null;
  field dynamic instanceField = null;
  synthetic constructor •() → self::C*
    : super core::Object::•()
    ;
  static set staticSetter(dynamic x) → void {}
  set instanceSetter(dynamic x) → void {}
  method test() → void {
    dynamic localVar;
    {
      core::Iterator<dynamic>* :sync-for-iterator = <dynamic>[].{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final dynamic #t1 = :sync-for-iterator.{core::Iterator::current};
        {
          self::topLevel = #t1;
        }
      }
    }
    {
      core::Iterator<dynamic>* :sync-for-iterator = <dynamic>[].{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final dynamic #t2 = :sync-for-iterator.{core::Iterator::current};
        {
          self::topLevelSetter = #t2;
        }
      }
    }
    {
      core::Iterator<dynamic>* :sync-for-iterator = <dynamic>[].{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final dynamic #t3 = :sync-for-iterator.{core::Iterator::current};
        {
          self::C::staticField = #t3;
        }
      }
    }
    {
      core::Iterator<dynamic>* :sync-for-iterator = <dynamic>[].{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final dynamic #t4 = :sync-for-iterator.{core::Iterator::current};
        {
          self::C::staticSetter = #t4;
        }
      }
    }
    {
      core::Iterator<dynamic>* :sync-for-iterator = <dynamic>[].{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final dynamic #t5 = :sync-for-iterator.{core::Iterator::current};
        {
          this.{self::C::instanceField} = #t5;
        }
      }
    }
    {
      core::Iterator<dynamic>* :sync-for-iterator = <dynamic>[].{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final dynamic #t6 = :sync-for-iterator.{core::Iterator::current};
        {
          this.{self::C::instanceSetter} = #t6;
        }
      }
    }
    {
      core::Iterator<dynamic>* :sync-for-iterator = <dynamic>[].{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final dynamic #t7 = :sync-for-iterator.{core::Iterator::current};
        {
          localVar = #t7;
        }
      }
    }
  }
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
static field dynamic topLevel;
static set topLevelSetter(dynamic x) → void {}
static method main() → dynamic {}
