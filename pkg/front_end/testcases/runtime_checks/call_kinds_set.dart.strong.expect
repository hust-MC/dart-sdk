library test;
import self as self;
import "dart:core" as core;

class C extends core::Object {
  field dynamic y = null;
  synthetic constructor •() → self::C*
    : super core::Object::•()
    ;
  set x(dynamic value) → void {}
  method test() → void {
    this.{self::C::x} = null;
    this.{self::C::x} = null;
    this.{self::C::y} = null;
    this.{self::C::y} = null;
  }
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
static method test(self::C* c, dynamic d) → void {
  c.{self::C::x} = null;
  c.{self::C::y} = null;
  d.x = null;
}
static method main() → dynamic {}
