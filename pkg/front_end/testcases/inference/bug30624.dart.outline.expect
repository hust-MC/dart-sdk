library test;
import self as self;
import "dart:core" as core;

class C<E extends core::Object* = dynamic> extends core::Object {
  synthetic constructor •() → self::C<self::C::E*>*
    ;
  method barA([(self::C::E*, self::C::E*) →* core::int* cmp]) → void
    ;
  method barB([(self::C::E*, self::C::E*) →* core::int* cmp]) → void
    ;
  method barC([(self::C::E*, self::C::E*) →* core::int* cmp]) → void
    ;
  method barD([(self::C::E*, self::C::E*) →* core::int* cmp]) → void
    ;
  method barE([(self::C::E*, self::C::E*) →* core::int* cmp]) → void
    ;
  method barF([(self::C::E*, self::C::E*) →* core::int* cmp]) → void
    ;
  static method _default(dynamic a, dynamic b) → core::int*
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
static method foo<E extends core::Object* = dynamic>(self::C<self::foo::E*>* c, (self::foo::E*, self::foo::E*) →* core::int* cmp) → void
  ;
static method main() → dynamic
  ;
