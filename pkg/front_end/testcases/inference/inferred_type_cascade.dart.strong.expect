library test;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  field core::int* a = null;
  field core::List<core::int*>* b = null;
  synthetic constructor •() → self::A*
    : super core::Object::•()
    ;
  method m() → void {}
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
static field self::A* v = let final self::A* #t1 = new self::A::•() in block {
  #t1.{self::A::a} = 1;
  #t1.{self::A::b}.{core::List::add}(2);
  #t1.{self::A::m}();
} =>#t1;
static method main() → dynamic {}
