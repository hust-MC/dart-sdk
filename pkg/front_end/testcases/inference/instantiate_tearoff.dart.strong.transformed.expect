library test;
import self as self;
import "dart:core" as core;

class C extends core::Object {
  synthetic constructor •() → self::C*
    : super core::Object::•()
    ;
  method f<T extends core::Object* = dynamic>(self::C::f::T* x) → self::C::f::T*
    return x;
  static method g<T extends core::Object* = dynamic>(self::C::g::T* x) → self::C::g::T*
    return x;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
class D extends self::C {
  synthetic constructor •() → self::D*
    : super self::C::•()
    ;
  method test() → void {
    (core::int*) →* core::int* func;
    func = super.{self::C::f}<core::int*>;
  }
}
static method f<T extends core::Object* = dynamic>(self::f::T* x) → self::f::T*
  return x;
static method test() → void {
  function h<T extends core::Object* = dynamic>(T* x) → T*
    return x;
  (core::int*) →* core::int* func;
  func = #C1<core::int*>;
  func = new self::C::•().{self::C::f}<core::int*>;
  func = #C2<core::int*>;
  func = h<core::int*>;
}
static method main() → dynamic {}

constants  {
  #C1 = tearoff self::f
  #C2 = tearoff self::C::g
}
