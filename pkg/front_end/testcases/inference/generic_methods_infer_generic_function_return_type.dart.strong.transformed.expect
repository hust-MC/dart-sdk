library test;
import self as self;
import "dart:core" as core;

typedef F<V extends core::Object* = dynamic> = () →* V*;
class C<T extends core::Object* = dynamic> extends self::D<self::C::T*> {
  synthetic constructor •() → self::C<self::C::T*>*
    : super self::D::•()
    ;
  method f<U extends core::Object* = dynamic>(self::C::f::U* x) → () →* self::C::f::U* {}
}
class D<T extends core::Object* = dynamic> extends core::Object {
  synthetic constructor •() → self::D<self::D::T*>*
    : super core::Object::•()
    ;
  method f<U extends core::Object* = dynamic>(self::D::f::U* u) → () →* self::D::f::U*
    return null;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
static method main() → dynamic {}
