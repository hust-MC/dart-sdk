library test;
import self as self;
import "dart:core" as core;

typedef F = () →* core::int*;
abstract class A extends core::Object {
  synthetic constructor •() → self::A*
    : super core::Object::•()
    ;
  abstract set x(() →* core::int* value) → void;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
abstract class B extends self::A {
  synthetic constructor •() → self::B*
    : super self::A::•()
    ;
  abstract set x(() →* dynamic value) → void;
}
static method f<T extends core::Object* = dynamic>() → self::f::T*
  return null;
static method g(self::B* b) → dynamic {
  b.{self::B::x} = self::f<() →* dynamic>();
}
static method main() → dynamic {}
