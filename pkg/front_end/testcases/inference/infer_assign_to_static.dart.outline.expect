library test;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A*
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
class B extends self::A {
  static field self::B* staticVariable;
  synthetic constructor •() → self::B*
    ;
  operator +(self::C* v) → self::A*
    ;
  operator -(core::int* i) → self::B*
    ;
  operator *(self::B* v) → self::B*
    ;
  operator &(self::A* v) → self::C*
    ;
}
class C extends self::B {
  synthetic constructor •() → self::C*
    ;
}
static field self::B* topLevelVariable;
static method f<T extends core::Object* = dynamic>() → self::f::T*
  ;
static method test_topLevelVariable() → void
  ;
static method test_staticVariable() → void
  ;
static method main() → dynamic
  ;
