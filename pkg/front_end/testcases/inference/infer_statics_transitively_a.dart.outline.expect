library;
import self as self;
import "dart:core" as core;

import "org-dartlang-testcase:///infer_statics_transitively.dart";
import "org-dartlang-testcase:///infer_statics_transitively_b.dart";

class A extends core::Object {
  static final field core::int* a2;
  synthetic constructor •() → self::A*
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
static final field core::int* a1;
static method main() → dynamic
  ;

library test;
import self as self2;
import "dart:core" as core;

import "org-dartlang-testcase:///infer_statics_transitively_a.dart";

static final field core::int* m1;
static final field core::int* m2;
static method foo() → dynamic
  ;
static method main() → dynamic
  ;

library;
import self as self3;
import "dart:core" as core;

static final field core::int* b1;
static method main() → dynamic
  ;
