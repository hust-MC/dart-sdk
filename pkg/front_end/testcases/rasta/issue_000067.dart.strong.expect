library;
import self as self;
import "dart:core" as core;
import "package:expect/expect.dart" as exp;

import "package:expect/expect.dart";

class A extends core::Object {
  static field dynamic _redirecting# = <dynamic>[self::A::foo];
  constructor •() → self::A*
    : super core::Object::•() {}
  static factory foo() → self::A*
    let dynamic #redirecting_factory = self::C::bar in invalid-expression;
  method m() → core::int* {}
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
class C extends self::A {
  static field dynamic _redirecting# = <dynamic>[self::C::bar];
  constructor •() → self::C*
    : super self::A::•() {}
  static factory bar() → self::C*
    let dynamic #redirecting_factory = self::D::• in invalid-expression;
  method m() → core::int* {
    return 1;
  }
}
class D extends self::C {
  synthetic constructor •() → self::D*
    : super self::C::•()
    ;
  method m() → core::int* {
    return 2;
  }
}
static method main() → dynamic {
  self::A* a = new self::D::•();
  exp::Expect::equals(2, a.{self::A::m}());
}
