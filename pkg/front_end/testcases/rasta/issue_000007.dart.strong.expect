library;
import self as self;
import "dart:core" as core;

class Base extends core::Object {
  synthetic constructor •() → self::Base*
    : super core::Object::•()
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
class Mixin extends core::Object {
  synthetic constructor •() → self::Mixin*
    : super core::Object::•()
    ;
  method foo() → dynamic
    return core::print("foo");
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
abstract class _Sub&Base&Mixin = self::Base with self::Mixin /*isAnonymousMixin*/  {
  synthetic constructor •() → self::_Sub&Base&Mixin*
    : super self::Base::•()
    ;
}
class Sub extends self::_Sub&Base&Mixin {
  synthetic constructor •() → self::Sub*
    : super self::_Sub&Base&Mixin::•()
    ;
}
static method main() → dynamic {
  new self::Sub::•().{self::Mixin::foo}();
}
