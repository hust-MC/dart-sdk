library;
import self as self;
import "dart:core" as core;

class Foo extends core::Object {
  static const field core::int* staticConstant = 42;
  static field core::int* staticField;
  synthetic constructor •() → self::Foo*
    ;
  static method staticFunction() → dynamic
    ;
  static get staticGetter() → dynamic
    ;
  static set staticSetter(dynamic _) → void
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
static method use(dynamic x) → dynamic
  ;
static method main() → dynamic
  ;
